# .github/workflows/release-info-trigger.yml
#
# CAMARA Release Information Trigger Workflow
#
# Purpose: Minimal entry point for generating release information for API repository README files.
# Can be triggered manually with repository or release PR URL.
#
# This workflow demonstrates:
# 1. How to call the reusable workflow with just a URL
# 2. How to use the outputs for further automation (e.g., creating PRs)
#
# Deploy this file to: ANY CAMARA repository .github/workflows/ directory

name: 'CAMARA Release Information Generator'

on:
  workflow_dispatch:
    inputs:
      target_url:
        description: 'Repository URL or Release PR URL (e.g., https://github.com/camaraproject/QualityOnDemand or https://github.com/camaraproject/QualityOnDemand/pull/123)'
        required: true
        type: string

jobs:
  generate-release-info:
    uses: hdamker/tooling/.github/workflows/release-info-reusable.yml@main
    # For production use with official tooling:
    # uses: camaraproject/tooling/.github/workflows/release-info-reusable.yml@main
    with:
      target_url: ${{ inputs.target_url }}
    secrets: inherit

  # Optional: Use the output for further automation
  display-results:
    needs: generate-release-info
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Show Results
        run: |
          STATUS="${{ needs.generate-release-info.outputs.generation_status }}"
          
          if [[ "$STATUS" == "success" ]]; then
            echo "✅ Release information generated successfully!"
            echo ""
            echo "Generated Markdown:"
            echo "=================="
            # Decode the base64 content
            echo "${{ needs.generate-release-info.outputs.release_info_content }}" | base64 -d
            echo "=================="
          elif [[ -z "$STATUS" ]]; then
            echo "❌ Workflow failed before generating output"
            echo "Check the workflow logs for details"
            exit 1
          else
            echo "❌ Failed to generate release information"
            ERROR_MSG="${{ needs.generate-release-info.outputs.error_message }}"
            if [[ -n "$ERROR_MSG" ]]; then
              echo "Error: $ERROR_MSG"
            fi
            exit 1
          fi
      
      # Example: Create a PR with the generated content
      # - name: Checkout Repository
      #   if: needs.generate-release-info.outputs.generation_status == 'success'
      #   uses: actions/checkout@v4
      #
      # - name: Update README with Release Info
      #   if: needs.generate-release-info.outputs.generation_status == 'success'
      #   run: |
      #     # Decode the base64 content
      #     echo "${{ needs.generate-release-info.outputs.release_info_content }}" | base64 -d > release-info-temp.md
      #     
      #     # Update README.md (example: replace between markers)
      #     # This assumes README has markers like:
      #     # <!-- RELEASE_INFO_START -->
      #     # <!-- RELEASE_INFO_END -->
      #     
      #     # Create updated README
      #     awk '/<!-- RELEASE_INFO_START -->/{print; system("cat release-info-temp.md"); f=1} /<!-- RELEASE_INFO_END -->/{f=0} !f' README.md > README.new
      #     mv README.new README.md
      #
      # - name: Create Pull Request
      #   if: needs.generate-release-info.outputs.generation_status == 'success'
      #   uses: peter-evans/create-pull-request@v5
      #   with:
      #     commit-message: "chore: update release information"
      #     title: "Update Release Information"
      #     body: "This PR updates the release information section in README.md"
      #     branch: update-release-info-${{ github.run_id }}
# .github/workflows/release-info-reusable.yml
#
# CAMARA Release Information - Reusable Workflow
#
# Purpose: Generates release information markdown for CAMARA API repository README files.
# Called by: release-info-trigger.yml workflow or any other workflow
#
# For Pull Requests: Assumes the PR is a "release PR" that defines content for a new release.
# The PR title must contain the release tag (rX.Y format).
#
# Exit codes:
#   0 - Success: Release information generated successfully
#   1 - Error: Failed to generate release information
#
# Outputs:
#   release_info_content - Base64 encoded markdown content (for preserving formatting)
#   generation_status - 'success' or 'error'
#   error_message - Error details if generation failed

name: 'CAMARA Release Information - Reusable'

on:
  workflow_call:
    inputs:
      target_url:
        required: true
        type: string
        description: "Repository URL or Release PR URL"
    outputs:
      release_info_content:
        description: "Generated release information markdown (base64 encoded)"
        value: ${{ jobs.generate-release-info.outputs.release_info_content }}
      generation_status:
        description: "Status of the generation: 'success' or 'error'"
        value: ${{ jobs.generate-release-info.outputs.generation_status }}
      error_message:
        description: "Error message if generation failed"
        value: ${{ jobs.generate-release-info.outputs.error_message }}

jobs:
  generate-release-info:
    runs-on: ubuntu-latest
    outputs:
      release_info_content: ${{ steps.generate.outputs.release_info_content }}
      generation_status: ${{ steps.generate.outputs.generation_status }}
      error_message: ${{ steps.generate.outputs.error_message }}
    steps:
      - name: Parse and Validate Input
        id: parse
        run: |
          TARGET_URL="${{ inputs.target_url }}"
          
          echo "🔍 Parsing input URL: $TARGET_URL"
          
          # Check if it's a PR URL
          if [[ "$TARGET_URL" =~ ^https://github\.com/([^/]+)/([^/]+)/pull/([0-9]+)$ ]]; then
            REPO_OWNER="${BASH_REMATCH[1]}"
            REPO_NAME="${BASH_REMATCH[2]}"
            PR_NUMBER="${BASH_REMATCH[3]}"
            
            echo "✅ Detected PR URL"
            echo "  Owner: $REPO_OWNER"
            echo "  Repository: $REPO_NAME"
            echo "  PR Number: $PR_NUMBER"
            
            echo "input_type=pull_request" >> $GITHUB_OUTPUT
            echo "repo_owner=$REPO_OWNER" >> $GITHUB_OUTPUT
            echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            
          # Check if it's a repository URL
          elif [[ "$TARGET_URL" =~ ^https://github\.com/([^/]+)/([^/]+)/?$ ]]; then
            REPO_OWNER="${BASH_REMATCH[1]}"
            REPO_NAME="${BASH_REMATCH[2]}"
            
            echo "✅ Detected Repository URL"
            echo "  Owner: $REPO_OWNER"
            echo "  Repository: $REPO_NAME"
            
            echo "input_type=repository" >> $GITHUB_OUTPUT
            echo "repo_owner=$REPO_OWNER" >> $GITHUB_OUTPUT
            echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
            echo "pr_number=" >> $GITHUB_OUTPUT
            
          else
            echo "❌ Invalid URL format: $TARGET_URL"
            echo "Expected formats:"
            echo "  - Repository: https://github.com/camaraproject/QualityOnDemand"
            echo "  - Pull Request: https://github.com/camaraproject/QualityOnDemand/pull/123"
            exit 1
          fi
          
          # Validate CAMARA organization
          if [[ "$REPO_OWNER" != "camaraproject" ]]; then
            echo "⚠️ Warning: Repository is not from camaraproject organization"
            echo "  Found: $REPO_OWNER"
            echo "  Expected: camaraproject"
            # Not failing here to allow testing with forks
          fi

      # ========== ANALYSIS PHASE ==========
      
      - name: Analyze Pull Request
        id: analyze_pr
        if: steps.parse.outputs.input_type == 'pull_request'
        run: |
          REPO_OWNER="${{ steps.parse.outputs.repo_owner }}"
          REPO_NAME="${{ steps.parse.outputs.repo_name }}"
          PR_NUMBER="${{ steps.parse.outputs.pr_number }}"
          
          echo "🔍 Analyzing PR #$PR_NUMBER as Release PR"
          
          # Get PR details
          PR_DATA=$(gh api repos/$REPO_OWNER/$REPO_NAME/pulls/$PR_NUMBER 2>/dev/null) || {
            echo "❌ Failed to fetch PR details"
            exit 1
          }
          
          # Extract PR title and look for release tag
          PR_TITLE=$(echo "$PR_DATA" | jq -r '.title')
          echo "PR Title: $PR_TITLE"
          
          # Extract release tag from title (must contain rX.Y)
          if [[ "$PR_TITLE" =~ r([0-9]+\.[0-9]+) ]]; then
            RELEASE_TAG="${BASH_REMATCH[0]}"
            echo "✅ Found release tag in PR title: $RELEASE_TAG"
            echo "pr_release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          else
            echo "❌ No release tag (rX.Y) found in PR title: $PR_TITLE"
            echo "Release PRs must contain the release tag in the title"
            exit 1
          fi
          
          # Get PR head details
          PR_HEAD_SHA=$(echo "$PR_DATA" | jq -r '.head.sha')
          PR_HEAD_REPO=$(echo "$PR_DATA" | jq -r '.head.repo.full_name')
          
          echo "pr_head_sha=$PR_HEAD_SHA" >> $GITHUB_OUTPUT
          echo "pr_head_repo=$PR_HEAD_REPO" >> $GITHUB_OUTPUT
          
          # Clone and analyze PR content
          mkdir -p pr-content
          cd pr-content
          
          git clone https://github.com/$PR_HEAD_REPO.git . 2>/dev/null || {
            echo "❌ Failed to clone PR repository"
            cd ..
            exit 1
          }
          
          git checkout $PR_HEAD_SHA 2>/dev/null || {
            echo "❌ Failed to checkout PR commit"
            cd ..
            exit 1
          }
          
          # Check for API definitions
          API_DIR="code/API_definitions"
          if [[ ! -d "$API_DIR" ]]; then
            echo "❌ No API definitions directory found at $API_DIR"
            cd ..
            exit 1
          fi
          
          # Analyze API files
          echo "📋 Analyzing API definitions..."
          
          API_FILES=$(find "$API_DIR" -name "*.yaml" -o -name "*.yml" | grep -v -E "(test|example|sample)" || true)
          
          if [[ -z "$API_FILES" ]]; then
            echo "❌ No API definition files found"
            cd ..
            exit 1
          fi
          
          # Extract API information and check versions
          PR_APIS=""
          HAS_WIP=false
          ALL_PRERELEASE=true
          ALL_PUBLIC=true
          
          for file in $API_FILES; do
            if [[ -f "$file" ]]; then
              API_NAME=$(basename "$file" .yaml | sed 's/\.yml$//')
              VERSION=$(grep -E "^\s*version:" "$file" | head -1 | sed 's/.*version:\s*//' | tr -d '"' | tr -d "'" || echo "unknown")
              
              echo "  - $API_NAME: $VERSION"
              
              # Check for wip version
              if [[ "$VERSION" == "wip" ]]; then
                HAS_WIP=true
                echo "    ❌ Found WIP version"
              fi
              
              # Check version type
              if [[ "$VERSION" =~ -alpha\. ]] || [[ "$VERSION" =~ -rc\. ]]; then
                ALL_PUBLIC=false
              elif [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                ALL_PRERELEASE=false
              else
                # Invalid version format
                if [[ "$VERSION" != "wip" ]]; then
                  echo "    ⚠️ Unexpected version format: $VERSION"
                fi
              fi
              
              if [[ -n "$VERSION" && "$VERSION" != "unknown" && "$VERSION" != "wip" ]]; then
                PR_APIS="${PR_APIS}${API_NAME}:${VERSION};"
              fi
            fi
          done
          
          cd ..
          
          # Validate PR content
          if [[ "$HAS_WIP" == "true" ]]; then
            echo "❌ Release PR cannot contain APIs with 'wip' version"
            exit 1
          fi
          
          if [[ -z "$PR_APIS" ]]; then
            echo "❌ No valid API versions found in PR"
            exit 1
          fi
          
          # Determine release type
          if [[ "$ALL_PRERELEASE" == "true" && "$ALL_PUBLIC" == "false" ]]; then
            RELEASE_TYPE="prerelease"
            echo "📦 PR contains only pre-release versions (-alpha.n or -rc.n)"
          elif [[ "$ALL_PUBLIC" == "true" && "$ALL_PRERELEASE" == "false" ]]; then
            RELEASE_TYPE="public"
            echo "📦 PR contains only public versions (x.y.z)"
          else
            echo "❌ PR contains mixed version types (both pre-release and public)"
            echo "   Release PRs must contain either all pre-release or all public versions"
            exit 1
          fi
          
          echo "pr_apis=$PR_APIS" >> $GITHUB_OUTPUT
          echo "pr_release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Analyze Repository Releases
        id: analyze_releases
        run: |
          echo "📦 Analyzing releases in ${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}"
          
          # Initialize analysis results
          echo '{
            "has_releases": false,
            "has_public_releases": false,
            "has_prereleases": false,
            "latest_public_release": null,
            "newest_prerelease": null,
            "recent_prereleases": []
          }' > analysis.json
          
          # Try to fetch the latest release using GitHub's latest release functionality
          LATEST_RELEASE_JSON=$(gh api repos/${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}/releases/latest 2>/dev/null || echo "null")
          
          LATEST_PUBLIC_TAG=""
          if [[ "$LATEST_RELEASE_JSON" != "null" ]]; then
            LATEST_TAG=$(echo "$LATEST_RELEASE_JSON" | jq -r '.tag_name')
            if [[ "$LATEST_TAG" =~ ^r[0-9]+\.[0-9]+$ ]]; then
              echo "Latest release (via GitHub): $LATEST_TAG"
              LATEST_PUBLIC_TAG="$LATEST_TAG"
              
              # Store latest release info
              jq --arg tag "$LATEST_TAG" '.latest_public_release = $tag | .has_public_releases = true' analysis.json > tmp.json && mv tmp.json analysis.json
            fi
          fi
          
          # Fetch all releases
          RELEASES_JSON=$(gh api repos/${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}/releases --paginate 2>/dev/null || echo "[]")
          
          # Filter releases with rx.y tags
          VALID_RELEASES=$(echo "$RELEASES_JSON" | jq '[.[] | select(.tag_name | test("^r[0-9]+\\.[0-9]+$"))]')
          
          # Count releases
          RELEASE_COUNT=$(echo "$VALID_RELEASES" | jq 'length')
          echo "Found $RELEASE_COUNT releases with rx.y tags"
          
          if [[ "$RELEASE_COUNT" -gt 0 ]]; then
            jq '.has_releases = true' analysis.json > tmp.json && mv tmp.json analysis.json
          fi
          
          # Find newest pre-release (regardless of age)
          NEWEST_PRERELEASE=$(echo "$VALID_RELEASES" | jq '[.[] | select(.prerelease == true)] | sort_by(.tag_name) | reverse | .[0]')
          
          if [[ "$NEWEST_PRERELEASE" != "null" ]]; then
            NEWEST_PRERELEASE_TAG=$(echo "$NEWEST_PRERELEASE" | jq -r '.tag_name')
            echo "Newest pre-release: $NEWEST_PRERELEASE_TAG"
            
            jq --arg tag "$NEWEST_PRERELEASE_TAG" '.newest_prerelease = $tag | .has_prereleases = true' analysis.json > tmp.json && mv tmp.json analysis.json
            
            # Check if it's recent (within 45 days)
            CUTOFF_DATE=$(date -u -d "45 days ago" +%Y-%m-%dT%H:%M:%SZ)
            PRERELEASE_DATE=$(echo "$NEWEST_PRERELEASE" | jq -r '.published_at')
            
            if [[ "$PRERELEASE_DATE" > "$CUTOFF_DATE" ]]; then
              echo "  - Is recent (within 45 days)"
              jq --arg tag "$NEWEST_PRERELEASE_TAG" '.recent_prereleases += [$tag]' analysis.json > tmp.json && mv tmp.json analysis.json
            fi
          fi
          
          # Output results
          cat analysis.json
          
          echo "latest_public_tag=$LATEST_PUBLIC_TAG" >> $GITHUB_OUTPUT
          echo "analysis_file=analysis.json" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ========== GENERATION PHASE ==========
      
      - name: Generate Release Information
        id: generate
        run: |
          echo "📝 Generating release information"
          
          # Load analysis results
          ANALYSIS=$(cat ${{ steps.analyze_releases.outputs.analysis_file }})
          
          # Function to extract API info from a specific tag
          extract_apis_from_tag() {
            local tag=$1
            local owner=$2
            local repo=$3
            
            local temp_dir="temp_checkout_${tag//\//_}"
            mkdir -p "$temp_dir"
            cd "$temp_dir"
            
            git clone --depth 1 --branch "$tag" "https://github.com/${owner}/${repo}.git" . 2>/dev/null || {
              cd ..
              rm -rf "$temp_dir"
              return 1
            }
            
            local api_info=""
            if [[ -d "code/API_definitions" ]]; then
              for file in code/API_definitions/*.yaml code/API_definitions/*.yml; do
                if [[ -f "$file" ]]; then
                  local api_name=$(basename "$file" .yaml | sed 's/\.yml$//')
                  local version=$(grep -E "^\s*version:" "$file" | head -1 | sed 's/.*version:\s*//' | tr -d '"' | tr -d "'" || echo "unknown")
                  
                  if [[ -n "$version" && "$version" != "unknown" ]]; then
                    api_info="${api_info}${api_name}:${version};"
                  fi
                fi
              done
            fi
            
            cd ..
            rm -rf "$temp_dir"
            
            echo "$api_info"
          }
          
          # Initialize output file
          OUTPUT_FILE="release_info.md"
          
          # Determine scenario and prepare data
          IS_PR="${{ steps.parse.outputs.input_type == 'pull_request' && 'true' || 'false' }}"
          HAS_PUBLIC=$(echo "$ANALYSIS" | jq -r '.has_public_releases')
          HAS_PRERELEASE=$(echo "$ANALYSIS" | jq -r '.has_prereleases')
          LATEST_PUBLIC=$(echo "$ANALYSIS" | jq -r '.latest_public_release // empty')
          NEWEST_PRERELEASE=$(echo "$ANALYSIS" | jq -r '.newest_prerelease // empty')
          RECENT_PRERELEASES=$(echo "$ANALYSIS" | jq -r '.recent_prereleases[]' 2>/dev/null)
          
          echo "Scenario analysis:"
          echo "- IS_PR: $IS_PR"
          echo "- HAS_PUBLIC: $HAS_PUBLIC"
          echo "- HAS_PRERELEASE: $HAS_PRERELEASE"
          echo "- LATEST_PUBLIC: $LATEST_PUBLIC"
          echo "- NEWEST_PRERELEASE: $NEWEST_PRERELEASE"
          echo "- RECENT_PRERELEASES: $RECENT_PRERELEASES"
          
          # If this is a PR, update release status based on PR content
          if [[ "$IS_PR" == "true" ]]; then
            PR_RELEASE_TAG="${{ steps.analyze_pr.outputs.pr_release_tag }}"
            PR_RELEASE_TYPE="${{ steps.analyze_pr.outputs.pr_release_type }}"
            PR_APIS="${{ steps.analyze_pr.outputs.pr_apis }}"
            
            echo "Processing Release PR with tag: $PR_RELEASE_TAG (type: $PR_RELEASE_TYPE)"
            
            # Compare version numbers for release ordering
            compare_release_tags() {
              local tag1=$1
              local tag2=$2
              
              # Extract version numbers
              local v1=$(echo "$tag1" | sed 's/r//')
              local v2=$(echo "$tag2" | sed 's/r//')
              
              # Compare using sort -V (version sort)
              if [[ $(echo -e "$v1\n$v2" | sort -V | head -1) == "$v1" ]]; then
                if [[ "$v1" == "$v2" ]]; then
                  echo "equal"
                else
                  echo "less"
                fi
              else
                echo "greater"
              fi
            }
            
            # Update release status based on PR
            if [[ "$PR_RELEASE_TYPE" == "public" ]]; then
              # Check if PR release should be the new latest
              if [[ -z "$LATEST_PUBLIC" ]] || [[ $(compare_release_tags "$PR_RELEASE_TAG" "$LATEST_PUBLIC") == "greater" ]]; then
                LATEST_PUBLIC="$PR_RELEASE_TAG"
                HAS_PUBLIC="true"
                echo "PR will be the new latest public release"
              fi
            else
              # Pre-release
              if [[ -z "$NEWEST_PRERELEASE" ]] || [[ $(compare_release_tags "$PR_RELEASE_TAG" "$NEWEST_PRERELEASE") == "greater" ]]; then
                NEWEST_PRERELEASE="$PR_RELEASE_TAG"
                RECENT_PRERELEASES="$PR_RELEASE_TAG"
                HAS_PRERELEASE="true"
                echo "PR will be the newest pre-release"
              fi
            fi
          fi
          
          # Start generating output
          cat > "$OUTPUT_FILE" << 'EOFHEADER'
## Release Information

*This section provides details about the latest releases and pre-releases of this API repository.*

EOFHEADER
          
          # Determine which variant to use and generate content
          if [[ "$HAS_PUBLIC" == "true" && (-n "$RECENT_PRERELEASES" || ("$IS_PR" == "true" && "$PR_RELEASE_TYPE" == "prerelease")) ]]; then
            echo "Generating Variant 1: Latest release and pre-release"
            
            # Generate public release section
            echo "### Latest Public Release" >> "$OUTPUT_FILE"
            echo "" >> "$OUTPUT_FILE"
            
            if [[ "$IS_PR" == "true" && "$PR_RELEASE_TYPE" == "public" && "$LATEST_PUBLIC" == "$PR_RELEASE_TAG" ]]; then
              echo "The latest public release is [$PR_RELEASE_TAG](https://github.com/${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}/releases/tag/$PR_RELEASE_TAG) and contains the following API definitions:" >> "$OUTPUT_FILE"
              echo "" >> "$OUTPUT_FILE"
              
              # Parse PR APIs
              IFS=';' read -ra API_LIST <<< "$PR_APIS"
              for api in "${API_LIST[@]}"; do
                if [[ -n "$api" ]]; then
                  IFS=':' read -r name version <<< "$api"
                  BASE_URL="https://raw.githubusercontent.com/${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}/$PR_RELEASE_TAG/code/API_definitions"
                  YAML_URL="${BASE_URL}/${name}.yaml"
                  SWAGGER_URL="https://camaraproject.github.io/swagger-ui/?url=${YAML_URL}"
                  REDOC_URL="https://redocly.github.io/redoc/?url=${YAML_URL}"
                  
                  echo "* **${name}** ${version} ([Swagger UI](${SWAGGER_URL}) | [Redoc](${REDOC_URL}) | [YAML](${YAML_URL}))" >> "$OUTPUT_FILE"
                fi
              done
            else
              # Existing latest release
              RELEASE_URL="https://github.com/${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}/releases/tag/$LATEST_PUBLIC"
              echo "The latest public release is [$LATEST_PUBLIC]($RELEASE_URL) and contains the following API definitions:" >> "$OUTPUT_FILE"
              echo "" >> "$OUTPUT_FILE"
              
              # Extract APIs from latest release
              APIS=$(extract_apis_from_tag "$LATEST_PUBLIC" "${{ steps.parse.outputs.repo_owner }}" "${{ steps.parse.outputs.repo_name }}")
              
              IFS=';' read -ra API_LIST <<< "$APIS"
              for api in "${API_LIST[@]}"; do
                if [[ -n "$api" ]]; then
                  IFS=':' read -r name version <<< "$api"
                  BASE_URL="https://raw.githubusercontent.com/${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}/$LATEST_PUBLIC/code/API_definitions"
                  YAML_URL="${BASE_URL}/${name}.yaml"
                  SWAGGER_URL="https://camaraproject.github.io/swagger-ui/?url=${YAML_URL}"
                  REDOC_URL="https://redocly.github.io/redoc/?url=${YAML_URL}"
                  
                  echo "* **${name}** ${version} ([Swagger UI](${SWAGGER_URL}) | [Redoc](${REDOC_URL}) | [YAML](${YAML_URL}))" >> "$OUTPUT_FILE"
                fi
              done
            fi
            
            echo "" >> "$OUTPUT_FILE"
            echo "For detailed information, see the [CHANGELOG.md](https://github.com/${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}/blob/main/CHANGELOG.md) and [Releases](https://github.com/${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}/releases)." >> "$OUTPUT_FILE"
            echo "" >> "$OUTPUT_FILE"
            echo "### Pre-release" >> "$OUTPUT_FILE"
            echo "" >> "$OUTPUT_FILE"
            
            # Generate pre-release section
            if [[ "$IS_PR" == "true" && "$PR_RELEASE_TYPE" == "prerelease" && "$NEWEST_PRERELEASE" == "$PR_RELEASE_TAG" ]]; then
              # PR is the newest pre-release
              echo -n "**NEW**: Pre-release [$PR_RELEASE_TAG](https://github.com/${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}/releases/tag/$PR_RELEASE_TAG) with " >> "$OUTPUT_FILE"
              
              # Format API list
              IFS=';' read -ra API_LIST <<< "$PR_APIS"
              # Count non-empty APIs
              API_COUNT=0
              for api in "${API_LIST[@]}"; do
                if [[ -n "$api" ]]; then
                  ((API_COUNT++))
                fi
              done
              
              if [[ $API_COUNT -eq 1 ]]; then
                # Single API - inline format
                for api in "${API_LIST[@]}"; do
                  if [[ -n "$api" ]]; then
                    IFS=':' read -r name version <<< "$api"
                    echo "${name} ${version} is available." >> "$OUTPUT_FILE"
                  fi
                done
              elif [[ $API_COUNT -eq 2 ]]; then
                # Two APIs - inline format with "and"
                first=""
                second=""
                for api in "${API_LIST[@]}"; do
                  if [[ -n "$api" ]]; then
                    IFS=':' read -r name version <<< "$api"
                    if [[ -z "$first" ]]; then
                      first="${name} ${version}"
                    else
                      second="${name} ${version}"
                    fi
                  fi
                done
                echo "${first} and ${second} is available." >> "$OUTPUT_FILE"
              else
                # Multiple APIs (3+) - list format
                echo ":" >> "$OUTPUT_FILE"
                for api in "${API_LIST[@]}"; do
                  if [[ -n "$api" ]]; then
                    IFS=':' read -r name version <<< "$api"
                    echo "  - ${name} ${version}" >> "$OUTPUT_FILE"
                  fi
                done
              fi
            else
              # Existing pre-release
              # Check if it's recent
              IS_RECENT="false"
              for recent in $RECENT_PRERELEASES; do
                if [[ "$recent" == "$NEWEST_PRERELEASE" ]]; then
                  IS_RECENT="true"
                  break
                fi
              done
              
              if [[ "$IS_RECENT" == "true" ]]; then
                echo -n "**NEW**: Pre-release [$NEWEST_PRERELEASE](https://github.com/${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}/releases/tag/$NEWEST_PRERELEASE) with " >> "$OUTPUT_FILE"
              else
                echo -n "Pre-release [$NEWEST_PRERELEASE](https://github.com/${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}/releases/tag/$NEWEST_PRERELEASE) with " >> "$OUTPUT_FILE"
              fi
              
              APIS=$(extract_apis_from_tag "$NEWEST_PRERELEASE" "${{ steps.parse.outputs.repo_owner }}" "${{ steps.parse.outputs.repo_name }}")
              IFS=';' read -ra API_LIST <<< "$APIS"
              # Count non-empty APIs
              API_COUNT=0
              for api in "${API_LIST[@]}"; do
                if [[ -n "$api" ]]; then
                  ((API_COUNT++))
                fi
              done
              
              if [[ $API_COUNT -eq 1 ]]; then
                # Single API - inline format
                for api in "${API_LIST[@]}"; do
                  if [[ -n "$api" ]]; then
                    IFS=':' read -r name version <<< "$api"
                    echo "${name} ${version} is available." >> "$OUTPUT_FILE"
                  fi
                done
              elif [[ $API_COUNT -eq 2 ]]; then
                # Two APIs - inline format with "and"
                first=""
                second=""
                for api in "${API_LIST[@]}"; do
                  if [[ -n "$api" ]]; then
                    IFS=':' read -r name version <<< "$api"
                    if [[ -z "$first" ]]; then
                      first="${name} ${version}"
                    else
                      second="${name} ${version}"
                    fi
                  fi
                done
                echo "${first} and ${second} is available." >> "$OUTPUT_FILE"
              else
                # Multiple APIs (3+) - list format
                echo ":" >> "$OUTPUT_FILE"
                for api in "${API_LIST[@]}"; do
                  if [[ -n "$api" ]]; then
                    IFS=':' read -r name version <<< "$api"
                    echo "  - ${name} ${version}" >> "$OUTPUT_FILE"
                  fi
                done
              fi
            fi
            
            echo "" >> "$OUTPUT_FILE"
            echo "For previous releases and pre-releases see the [CHANGELOG.md](https://github.com/${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}/blob/main/CHANGELOG.md) and [Releases](https://github.com/${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}/releases)" >> "$OUTPUT_FILE"
            
          elif [[ "$HAS_PUBLIC" == "true" ]]; then
            echo "Generating Variant 2: Latest release and no current pre-release"
            
            # Generate Variant 2
            echo "For detailed information, see the [CHANGELOG.md](https://github.com/${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}/blob/main/CHANGELOG.md) and [Releases](https://github.com/${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}/releases)." >> "$OUTPUT_FILE"
            echo "" >> "$OUTPUT_FILE"
            echo "### Latest Public Release" >> "$OUTPUT_FILE"
            echo "" >> "$OUTPUT_FILE"
            
            if [[ "$IS_PR" == "true" && "$PR_RELEASE_TYPE" == "public" && "$LATEST_PUBLIC" == "$PR_RELEASE_TAG" ]]; then
              # PR is the new latest release
              echo "The latest public release is [$PR_RELEASE_TAG](https://github.com/${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}/releases/tag/$PR_RELEASE_TAG) and contains the following API definitions:" >> "$OUTPUT_FILE"
              echo "" >> "$OUTPUT_FILE"
              
              IFS=';' read -ra API_LIST <<< "$PR_APIS"
              for api in "${API_LIST[@]}"; do
                if [[ -n "$api" ]]; then
                  IFS=':' read -r name version <<< "$api"
                  BASE_URL="https://raw.githubusercontent.com/${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}/$PR_RELEASE_TAG/code/API_definitions"
                  YAML_URL="${BASE_URL}/${name}.yaml"
                  SWAGGER_URL="https://camaraproject.github.io/swagger-ui/?url=${YAML_URL}"
                  REDOC_URL="https://redocly.github.io/redoc/?url=${YAML_URL}"
                  
                  echo "* **${name}** ${version} ([Swagger UI](${SWAGGER_URL}) | [Redoc](${REDOC_URL}) | [YAML](${YAML_URL}))" >> "$OUTPUT_FILE"
                fi
              done
            else
              # Existing latest release
              RELEASE_URL="https://github.com/${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}/releases/tag/$LATEST_PUBLIC"
              echo "The latest public release is [$LATEST_PUBLIC]($RELEASE_URL) and contains the following API definitions:" >> "$OUTPUT_FILE"
              echo "" >> "$OUTPUT_FILE"
              
              APIS=$(extract_apis_from_tag "$LATEST_PUBLIC" "${{ steps.parse.outputs.repo_owner }}" "${{ steps.parse.outputs.repo_name }}")
              
              IFS=';' read -ra API_LIST <<< "$APIS"
              for api in "${API_LIST[@]}"; do
                if [[ -n "$api" ]]; then
                  IFS=':' read -r name version <<< "$api"
                  BASE_URL="https://raw.githubusercontent.com/${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}/$LATEST_PUBLIC/code/API_definitions"
                  YAML_URL="${BASE_URL}/${name}.yaml"
                  SWAGGER_URL="https://camaraproject.github.io/swagger-ui/?url=${YAML_URL}"
                  REDOC_URL="https://redocly.github.io/redoc/?url=${YAML_URL}"
                  
                  echo "* **${name}** ${version} ([Swagger UI](${SWAGGER_URL}) | [Redoc](${REDOC_URL}) | [YAML](${YAML_URL}))" >> "$OUTPUT_FILE"
                fi
              done
            fi
            
            echo "" >> "$OUTPUT_FILE"
            echo "### Pre-releases" >> "$OUTPUT_FILE"
            echo "" >> "$OUTPUT_FILE"
            echo "There is no current pre-release, please refer to the latest release above. For previous releases and pre-releases see the [CHANGELOG.md](https://github.com/${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}/blob/main/CHANGELOG.md) and [Releases](https://github.com/${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}/releases)" >> "$OUTPUT_FILE"
            
          elif [[ "$HAS_PRERELEASE" == "true" || ("$IS_PR" == "true" && "$PR_RELEASE_TYPE" == "prerelease") ]]; then
            echo "Generating Variant 3: Pre-release only"
            
            # Generate Variant 3
            echo "### Latest Public Release" >> "$OUTPUT_FILE"
            echo "" >> "$OUTPUT_FILE"
            echo "The repository has not yet a public release." >> "$OUTPUT_FILE"
            echo "" >> "$OUTPUT_FILE"
            echo "### Pre-release" >> "$OUTPUT_FILE"
            echo "" >> "$OUTPUT_FILE"
            
            if [[ "$IS_PR" == "true" && "$PR_RELEASE_TYPE" == "prerelease" ]]; then
              # PR is a pre-release - always show as NEW since it's for the release being created
              echo -n "**NEW**: Pre-release [$PR_RELEASE_TAG](https://github.com/${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}/releases/tag/$PR_RELEASE_TAG) with " >> "$OUTPUT_FILE"
              
              # Format API list for PR
              IFS=';' read -ra API_LIST <<< "$PR_APIS"
              # Count non-empty APIs
              API_COUNT=0
              for api in "${API_LIST[@]}"; do
                if [[ -n "$api" ]]; then
                  ((API_COUNT++))
                fi
              done
              
              if [[ $API_COUNT -eq 1 ]]; then
                # Single API - inline format
                for api in "${API_LIST[@]}"; do
                  if [[ -n "$api" ]]; then
                    IFS=':' read -r name version <<< "$api"
                    echo "${name} ${version} is available." >> "$OUTPUT_FILE"
                  fi
                done
              elif [[ $API_COUNT -eq 2 ]]; then
                # Two APIs - inline format with "and"
                first=""
                second=""
                for api in "${API_LIST[@]}"; do
                  if [[ -n "$api" ]]; then
                    IFS=':' read -r name version <<< "$api"
                    if [[ -z "$first" ]]; then
                      first="${name} ${version}"
                    else
                      second="${name} ${version}"
                    fi
                  fi
                done
                echo "${first} and ${second} is available." >> "$OUTPUT_FILE"
              else
                # Multiple APIs (3+) - list format
                echo ":" >> "$OUTPUT_FILE"
                for api in "${API_LIST[@]}"; do
                  if [[ -n "$api" ]]; then
                    IFS=':' read -r name version <<< "$api"
                    echo "  - ${name} ${version}" >> "$OUTPUT_FILE"
                  fi
                done
              fi
            else
              # Existing pre-release
              # Check if it's recent
              IS_RECENT="false"
              for recent in $RECENT_PRERELEASES; do
                if [[ "$recent" == "$NEWEST_PRERELEASE" ]]; then
                  IS_RECENT="true"
                  break
                fi
              done
              
              if [[ "$IS_RECENT" == "true" ]]; then
                echo -n "**NEW**: Pre-release [$NEWEST_PRERELEASE](https://github.com/${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}/releases/tag/$NEWEST_PRERELEASE) with " >> "$OUTPUT_FILE"
              else
                echo -n "Pre-release [$NEWEST_PRERELEASE](https://github.com/${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}/releases/tag/$NEWEST_PRERELEASE) with " >> "$OUTPUT_FILE"
              fi
              
              APIS=$(extract_apis_from_tag "$NEWEST_PRERELEASE" "${{ steps.parse.outputs.repo_owner }}" "${{ steps.parse.outputs.repo_name }}")
              IFS=';' read -ra API_LIST <<< "$APIS"
              # Count non-empty APIs
              API_COUNT=0
              for api in "${API_LIST[@]}"; do
                if [[ -n "$api" ]]; then
                  ((API_COUNT++))
                fi
              done
              
              if [[ $API_COUNT -eq 1 ]]; then
                # Single API - inline format
                for api in "${API_LIST[@]}"; do
                  if [[ -n "$api" ]]; then
                    IFS=':' read -r name version <<< "$api"
                    echo "${name} ${version} is available." >> "$OUTPUT_FILE"
                  fi
                done
              elif [[ $API_COUNT -eq 2 ]]; then
                # Two APIs - inline format with "and"
                first=""
                second=""
                for api in "${API_LIST[@]}"; do
                  if [[ -n "$api" ]]; then
                    IFS=':' read -r name version <<< "$api"
                    if [[ -z "$first" ]]; then
                      first="${name} ${version}"
                    else
                      second="${name} ${version}"
                    fi
                  fi
                done
                echo "${first} and ${second} is available." >> "$OUTPUT_FILE"
              else
                # Multiple APIs (3+) - list format
                echo ":" >> "$OUTPUT_FILE"
                for api in "${API_LIST[@]}"; do
                  if [[ -n "$api" ]]; then
                    IFS=':' read -r name version <<< "$api"
                    echo "  - ${name} ${version}" >> "$OUTPUT_FILE"
                  fi
                done
              fi
            fi
            
            echo "" >> "$OUTPUT_FILE"
            echo "For previous releases and pre-releases see the [CHANGELOG.md](https://github.com/${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}/blob/main/CHANGELOG.md) and [Releases](https://github.com/${{ steps.parse.outputs.repo_owner }}/${{ steps.parse.outputs.repo_name }}/releases)" >> "$OUTPUT_FILE"
            
          else
            echo "Generating Variant 4: No releases"
            
            # Generate Variant 4
            echo "### Latest Public Release" >> "$OUTPUT_FILE"
            echo "" >> "$OUTPUT_FILE"
            echo "The repository has no public releases yet" >> "$OUTPUT_FILE"
            echo "" >> "$OUTPUT_FILE"
            echo "### Pre-release" >> "$OUTPUT_FILE"
            echo "" >> "$OUTPUT_FILE"
            echo "The repository has no pre-release yet. For work in progress see the content of the main branch and in open pull requests." >> "$OUTPUT_FILE"
          fi
          
          # Output results
          if [[ -f "$OUTPUT_FILE" ]]; then
            echo "✅ Successfully generated release information"
            echo ""
            echo "================== Generated Markdown =================="
            cat "$OUTPUT_FILE"
            echo "========================================================"
            
            # Base64 encode the content for output
            CONTENT_BASE64=$(base64 -w 0 < "$OUTPUT_FILE")
            echo "release_info_content=$CONTENT_BASE64" >> $GITHUB_OUTPUT
            echo "generation_status=success" >> $GITHUB_OUTPUT
            echo "error_message=" >> $GITHUB_OUTPUT
            
            # Create GitHub step summary
            {
              echo "# Release Information Generated Successfully ✅"
              echo ""
              echo "**Target**: ${{ inputs.target_url }}"
              if [[ "$IS_PR" == "true" ]]; then
                echo "**Release PR Tag**: ${{ steps.analyze_pr.outputs.pr_release_tag }}"
                echo "**Release Type**: ${{ steps.analyze_pr.outputs.pr_release_type }}"
              fi
              echo ""
              echo "## Generated Content:"
              echo ""
              echo '```markdown'
              cat "$OUTPUT_FILE"
              echo '```'
              echo ""
              echo "## Usage:"
              echo "1. Copy the markdown content above"
              echo "2. Update the Release Information section in your README.md"
              echo "3. Commit the changes"
            } >> $GITHUB_STEP_SUMMARY
            
          else
            echo "❌ Failed to generate release information"
            echo "::error::Failed to generate output file"
            echo "release_info_content=" >> $GITHUB_OUTPUT
            echo "generation_status=error" >> $GITHUB_OUTPUT
            echo "error_message=Failed to generate output file" >> $GITHUB_OUTPUT
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: release-info-${{ steps.parse.outputs.repo_name }}-${{ github.run_id }}
          path: |
            release_info.md
            analysis.json
            pr-content/
          retention-days: 7
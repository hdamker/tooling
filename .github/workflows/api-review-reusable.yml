# .github/workflows/api-review-reusable.yml
# 
# CAMARA API Review - Reusable Workflow
# 
# Purpose: Performs automated validation of CAMARA API definitions against compliance checklist.
# Called by: api-review-trigger.yml workflow

name: 'CAMARA API Review - Reusable'

on:
  workflow_call:
    inputs:
      repo_owner:
        required: true
        type: string
        description: "Repository owner (e.g., 'camaraproject')"
      repo_name:
        required: true
        type: string
        description: "Repository name (e.g., 'QualityOnDemand')"
      issue_number:
        required: false
        type: string
        default: "0"
        description: "Issue or PR number for logging and metadata (e.g., '123', defaults to '0' for manual triggers)"
      pr_head_sha:
        required: true
        type: string
        description: "Git commit SHA to checkout and review"
      pr_head_repo:
        required: true
        type: string
        description: "Repository containing the code to review"
      review_type:
        required: true
        type: string
        description: "Type of review: 'release-candidate' or 'wip'"
      commonalities_version:
        required: true
        type: string
        description: "CAMARA Commonalities version to validate against"
      legacy_validator:
        description: 'Use legacy monolithic validator (default: true for compatibility)'
        required: false
        type: boolean
        default: true
      tooling_repository:
        required: false
        type: string
        default: "camaraproject/tooling"
        description: "Repository containing validation scripts"
      tooling_branch:
        required: false
        type: string
        default: "main"
        description: "Branch of tooling repository to use"
    outputs:
      summary_content:
        description: "The review summary content for posting to issues"
        value: ${{ jobs.provide-outputs.outputs.summary_content }}
      review_status:
        description: "Overall review status (success, has_critical_issues, error)"
        value: ${{ jobs.provide-outputs.outputs.review_status }}
      critical_issues_count:
        description: "Number of critical issues found"
        value: ${{ jobs.provide-outputs.outputs.critical_issues_count }}

jobs:
  validate-commonalities-version:
    runs-on: ubuntu-latest
    outputs:
      validator_script: ${{ steps.determine-validator.outputs.validator_script }}
      validator_type: ${{ steps.validate.outputs.validator_type }}
      version_supported: ${{ steps.determine-validator.outputs.version_supported }}
      error_message: ${{ steps.determine-validator.outputs.error_message }}
    steps:
      - name: Validate Commonalities Version Support
        id: determine-validator
        run: |
          COMMONALITIES_VERSION="${{ inputs.commonalities_version }}"
          
          echo "üîç Validating Commonalities version: $COMMONALITIES_VERSION"
          
          case "$COMMONALITIES_VERSION" in
            "0.6")
              echo "‚úÖ Commonalities 0.6 is supported"
              echo "validator_script=api_review_validator_v0_6.py" >> $GITHUB_OUTPUT
              echo "version_supported=true" >> $GITHUB_OUTPUT
              echo "error_message=" >> $GITHUB_OUTPUT
              ;;
            "0.7"|"0.8"|"0.9"|"1.0")
              echo "‚ùå Commonalities $COMMONALITIES_VERSION is not yet supported"
              echo "validator_script=" >> $GITHUB_OUTPUT
              echo "version_supported=false" >> $GITHUB_OUTPUT
              echo "error_message=Commonalities version $COMMONALITIES_VERSION is not yet supported. Currently supported versions: 0.6" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "‚ùå Unknown Commonalities version: $COMMONALITIES_VERSION"
              echo "validator_script=" >> $GITHUB_OUTPUT
              echo "version_supported=false" >> $GITHUB_OUTPUT
              echo "error_message=Unknown Commonalities version '$COMMONALITIES_VERSION'. Supported versions: 0.6" >> $GITHUB_OUTPUT
              ;;
          esac

          # Set validator type based on legacy parameter
          if [[ "${{ inputs.legacy_validator }}" == "true" ]]; then
            echo "validator_type=legacy" >> $GITHUB_OUTPUT
            echo "üì¶ Using legacy monolithic validator"
          else
            echo "validator_type=modular" >> $GITHUB_OUTPUT
            echo "üì¶ Using new modular validator"
          fi

  api-review:
    runs-on: ubuntu-latest
    needs: validate-commonalities-version
    if: needs.validate-commonalities-version.outputs.version_supported == 'true'
    timeout-minutes: 15
    outputs:
      summary_content: ${{ steps.prepare-summary.outputs.summary_content }}
      review_status: ${{ steps.check_api_dir.outputs.api_found == 'true' && steps.review.outputs.review_status || steps.no_apis.outputs.review_status }}
      critical_issues_count: ${{ steps.check_api_dir.outputs.api_found == 'true' && steps.review.outputs.critical_issues || '0' }}
      validation_duration: ${{ steps.check_api_dir.outputs.api_found == 'true' && steps.review.outputs.validation_duration || '0' }}
      apis_found_count: ${{ steps.check_api_dir.outputs.api_found == 'true' && steps.review.outputs.apis_found_count || '0' }}
    steps:
      - name: Setup Review Environment
        run: |
          echo "üöÄ Starting CAMARA API Review"
          echo "Repository: ${{ inputs.repo_owner }}/${{ inputs.repo_name }}"
          echo "Issue/PR: #${{ inputs.issue_number }}"
          echo "Review Type: ${{ inputs.review_type }}"
          echo "Commonalities Version: ${{ inputs.commonalities_version }}"
          echo "Validator: ${{ needs.validate-commonalities-version.outputs.validator_script }}"

      - name: Checkout Workflow Repository (Tooling)
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.tooling_repository }}
          ref: ${{ inputs.tooling_branch }}
          path: review-tools
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout Target Repository PR
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.pr_head_repo }}
          ref: ${{ inputs.pr_head_sha }}
          path: target-repo
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify Checkout
        run: |
          echo "üîç Verifying checkout..."
          cd target-repo
          
          CURRENT_SHA=$(git rev-parse HEAD)
          echo "Current SHA: $CURRENT_SHA"
          echo "Expected SHA: ${{ inputs.pr_head_sha }}"
          
          if [[ "$CURRENT_SHA" == "${{ inputs.pr_head_sha }}" ]]; then
            echo "‚úÖ Successfully checked out commit"
          else
            echo "‚ùå SHA mismatch!"
            exit 1
          fi
          
          if [[ -d "code/API_definitions" ]]; then
            API_COUNT=$(find code/API_definitions -name "*.yaml" -o -name "*.yml" | wc -l)
            echo "‚úÖ API definitions directory found with $API_COUNT YAML files"
          else
            echo "‚ö†Ô∏è No API definitions directory found at code/API_definitions"
          fi

      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          echo "üì¶ Installing Python dependencies..."
          pip install --upgrade pip
          pip install pyyaml>=6.0 jsonschema>=4.0 openapi-spec-validator>=0.5 requests>=2.28

      - name: Check for API Directory
        id: check_api_dir
        run: |
          cd target-repo
          if [[ -d "code/API_definitions" ]] && find code/API_definitions -name "*.yaml" -o -name "*.yml" | grep -q .; then
            echo "api_found=true" >> $GITHUB_OUTPUT
            API_COUNT=$(find code/API_definitions -name "*.yaml" -o -name "*.yml" | wc -l)
            echo "‚úÖ API definitions directory found with $API_COUNT YAML files"
          else
            echo "api_found=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No API definitions found in code/API_definitions/"
          fi

      - name: Locate Validator Script
        run: |
          VALIDATOR_SCRIPT="${{ needs.validate-commonalities-version.outputs.validator_script }}"
          
          echo "üîç Locating validator script: $VALIDATOR_SCRIPT"
          
          if [[ -f "review-tools/scripts/$VALIDATOR_SCRIPT" ]]; then
            echo "‚úÖ Found validator script"
            cp "review-tools/scripts/$VALIDATOR_SCRIPT" ./api_review_validator.py
            chmod +x api_review_validator.py
          else
            echo "‚ùå Validator script not found at review-tools/scripts/$VALIDATOR_SCRIPT"
            echo "Available files in scripts directory:"
            ls -la review-tools/scripts/ 2>/dev/null || echo "scripts directory not found"
            exit 1
          fi

      - name: Run Legacy Validator
        if: steps.check_api_dir.outputs.api_found == 'true' && needs.validate-commonalities-version.outputs.validator_type == 'legacy'
        id: legacy_review
        run: |
          # Remove 'set -e' temporarily to handle non-zero exit codes
          set +e  # Allow script to continue even if validator fails          

          echo "üöÄ Starting API validation with legacy validator..."

          VALIDATION_START_TIME=$(date +%s)
          
          # Set up validation environment
          export PYTHONPATH="${PYTHONPATH}:./review-tools"
          cd target-repo
          
          VALIDATOR_SCRIPT="../review-tools/scripts/${{ needs.validate-commonalities-version.outputs.validator_script }}"
          
          if [[ ! -f "$VALIDATOR_SCRIPT" ]]; then
            echo "‚ùå Validator script not found: $VALIDATOR_SCRIPT"
            exit 1
          fi
          
          echo "‚úÖ Using validator: $VALIDATOR_SCRIPT"
          
          # Create output directory
          mkdir -p ../review-output
          
          # Count API files for reporting
          API_DEF_DIR="./code/API_definitions"
          if [[ -d "$API_DEF_DIR" ]]; then
            API_DEF_COUNT=$(find "$API_DEF_DIR" -name "*.yaml" -o -name "*.yml" | wc -l)
          else
            API_DEF_COUNT=0
          fi
          
          echo "üìÅ Found $API_DEF_COUNT API definition files"
          
          # Run the validator and capture exit code WITHOUT failing the step
          python3 "$VALIDATOR_SCRIPT" \
            "." \
            --output "../review-output" \
            --repo-name "${{ inputs.repo_name }}" \
            --issue-number "${{ inputs.issue_number }}" \
            --commonalities-version "${{ inputs.commonalities_version }}" \
            --review-type "${{ inputs.review_type }}" \
            --verbose
          
          # Capture the exit code AFTER the command completes
          VALIDATION_EXIT_CODE=$?
          
          # Re-enable strict error checking for the rest of the step
          set -e
          
          VALIDATION_END_TIME=$(date +%s)
          VALIDATION_DURATION=$((VALIDATION_END_TIME - VALIDATION_START_TIME))
          
          echo "üìä Validation completed in ${VALIDATION_DURATION}s with exit code: $VALIDATION_EXIT_CODE"

          if [[ $VALIDATION_EXIT_CODE -eq 0 ]]; then
            echo "review_status=success" >> $GITHUB_OUTPUT
            echo "‚úÖ No critical issues found"
          elif [[ $VALIDATION_EXIT_CODE -eq 1 ]]; then
            echo "review_status=has_critical_issues" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Critical issues detected"
          else
            echo "review_status=error" >> $GITHUB_OUTPUT
            echo "‚ùå Validation error occurred"
          fi
          
          # Extract critical issues count from output if available
          CRITICAL_COUNT="0"
          if [[ -f "../review-output/summary.md" ]]; then
            # Try to extract critical count from summary
            CRITICAL_LINE=$(grep -E "üî¥ Critical: [0-9]+" "../review-output/summary.md" || echo "")
            if [[ -n "$CRITICAL_LINE" ]]; then
              CRITICAL_COUNT=$(echo "$CRITICAL_LINE" | grep -oE "[0-9]+")
            fi
          fi
          
          echo "validation_duration=$VALIDATION_DURATION" >> $GITHUB_OUTPUT
          echo "apis_found_count=$API_DEF_COUNT" >> $GITHUB_OUTPUT
          echo "critical_issues=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "validation_exit_code=${VALIDATION_EXIT_CODE:-0}" >> $GITHUB_OUTPUT

      - name: Run New Modular Validator  
        if: steps.check_api_dir.outputs.api_found == 'true' && needs.validate-commonalities-version.outputs.validator_type == 'modular'
        id: modular_review
        run: |
          echo "üöÄ Starting API validation with new modular validator..."
          
          VALIDATION_START_TIME=$(date +%s)
          
          # Install the modular validator package
          pip install ./review-tools/scripts/camara-validator
          
          cd target-repo
          mkdir -p ../review-output
          
          # Count API files for reporting
          API_DEF_COUNT=$(find code/API_definitions -name "*.yaml" -o -name "*.yml" | wc -l)
          echo "üìÅ Found $API_DEF_COUNT API definition files"
          
          # Run with the new CLI interface
          set +e  # Allow script to continue even if validator fails
          
          camara-validate \
            "." \
            --version "${{ inputs.commonalities_version }}" \
            --output "../review-output" \
            --repo-name "${{ inputs.repo_name }}" \
            --pr-number "${{ inputs.issue_number }}"
          
          VALIDATION_EXIT_CODE=$?
          set -e
          
          VALIDATION_END_TIME=$(date +%s)
          VALIDATION_DURATION=$((VALIDATION_END_TIME - VALIDATION_START_TIME))
          
          echo "üìä Validation completed in ${VALIDATION_DURATION}s with exit code: $VALIDATION_EXIT_CODE"
          
          # Determine review status based on exit code
          if [[ $VALIDATION_EXIT_CODE -eq 0 ]]; then
            echo "review_status=success" >> $GITHUB_OUTPUT
            echo "‚úÖ No critical issues found"
          elif [[ $VALIDATION_EXIT_CODE -eq 1 ]]; then
            echo "review_status=has_critical_issues" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Critical issues detected"
          else
            echo "review_status=error" >> $GITHUB_OUTPUT
            echo "‚ùå Validation error occurred"
          fi
          
          # Extract critical issues count from output if available
          CRITICAL_COUNT="0"
          if [[ -f "../review-output/summary.md" ]]; then
            CRITICAL_LINE=$(grep -E "üî¥ Critical: [0-9]+" "../review-output/summary.md" || echo "")
            if [[ -n "$CRITICAL_LINE" ]]; then
              CRITICAL_COUNT=$(echo "$CRITICAL_LINE" | grep -oE "[0-9]+")
            fi
          fi
          
          echo "validation_exit_code=${VALIDATION_EXIT_CODE:-0}" >> $GITHUB_OUTPUT
          echo "validation_duration=$VALIDATION_DURATION" >> $GITHUB_OUTPUT
          echo "apis_found_count=$API_DEF_COUNT" >> $GITHUB_OUTPUT
          echo "critical_issues=$CRITICAL_COUNT" >> $GITHUB_OUTPUT

      - name: Determine Review Status
        id: review
        if: steps.check_api_dir.outputs.api_found == 'true'
        run: |
          echo "üìä Determining final review status..."
          
          # Get outputs from the validator that actually ran
          if [[ "${{ needs.validate-commonalities-version.outputs.validator_type }}" == "legacy" ]]; then
            echo "Using results from legacy validator"
            REVIEW_STATUS="${{ steps.legacy_review.outputs.review_status }}"
            CRITICAL_ISSUES="${{ steps.legacy_review.outputs.critical_issues }}"
            VALIDATION_DURATION="${{ steps.legacy_review.outputs.validation_duration }}"
            APIS_FOUND="${{ steps.legacy_review.outputs.apis_found_count }}"
          else
            echo "Using results from modular validator"
            REVIEW_STATUS="${{ steps.modular_review.outputs.review_status }}"
            CRITICAL_ISSUES="${{ steps.modular_review.outputs.critical_issues }}"
            VALIDATION_DURATION="${{ steps.modular_review.outputs.validation_duration }}"
            APIS_FOUND="${{ steps.modular_review.outputs.apis_found_count }}"
          fi
          
          # Output the final results
          echo "review_status=${REVIEW_STATUS:-error}" >> $GITHUB_OUTPUT
          echo "critical_issues=${CRITICAL_ISSUES:-0}" >> $GITHUB_OUTPUT
          echo "validation_duration=${VALIDATION_DURATION:-0}" >> $GITHUB_OUTPUT
          echo "apis_found_count=${APIS_FOUND:-0}" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Final status: $REVIEW_STATUS with $CRITICAL_ISSUES critical issues"

      - name: Handle No APIs Found
        if: steps.check_api_dir.outputs.api_found == 'false'
        id: no_apis
        run: |
          echo "‚ö†Ô∏è No API definitions found to validate"
          
          # Create a summary for no APIs case
          mkdir -p review-output
          cat > review-output/summary.md << EOF
          ## ‚ö†Ô∏è No API Definitions Found
          
          The validator could not find any API definitions in the expected location.
          
          **Expected location**: \`/code/API_definitions/\`
          
          **Next steps**:
          1. Ensure your API definitions are in the correct directory
          2. Check that files have .yaml or .yml extension
          3. Verify the repository structure matches CAMARA standards
          EOF
          
          echo "review_status=error" >> $GITHUB_OUTPUT
          echo "critical_issues=0" >> $GITHUB_OUTPUT
          echo "validation_duration=0" >> $GITHUB_OUTPUT
          echo "apis_found_count=0" >> $GITHUB_OUTPUT

      - name: Find Generated Report File
        id: find-report
        if: always()
        run: |
          echo "üîç Searching for generated report..."
          
          REPORT_FILE=""

          # Replace in api-review-reusable.yml "Find Generated Report File" step:
          REPORT_FILE=$(find ./review-output -name "api_review_*_comment*_v*.md" -o -name "api_review_*_manual_v*.md" -type f | head -1)
          if [[ -z "$REPORT_FILE" ]]; then
            REPORT_FILE=$(find ./review-output -name "api_review_v*.md" -type f | head -1)
          fi
          
          if [[ -z "$REPORT_FILE" ]]; then
            REPORT_FILE=$(find ./review-output -name "*report*.md" -type f | head -1)
          fi
          
          if [[ -n "$REPORT_FILE" ]]; then
            REPORT_FILENAME=$(basename "$REPORT_FILE")
            echo "‚úÖ Found report: $REPORT_FILENAME"
            echo "report_filename=$REPORT_FILENAME" >> $GITHUB_OUTPUT
            echo "report_path=$REPORT_FILE" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è No report file found"
            echo "report_filename=no-report-generated.md" >> $GITHUB_OUTPUT
            echo "report_path=" >> $GITHUB_OUTPUT
          fi

      - name: Upload Detailed Report
        uses: actions/upload-artifact@v4
        id: upload-detailed-report
        if: always() && steps.find-report.outputs.report_path != ''
        with:
          name: ${{ steps.find-report.outputs.report_filename }}
          path: ${{ steps.find-report.outputs.report_path }}
          retention-days: 30

      - name: Prepare Summary Output
        id: prepare-summary
        if: always()
        run: |
          echo "üìã Preparing summary output..."
          
          if [[ -f "./review-output/summary.md" ]]; then
            echo "‚úÖ Summary file found"
            
            # Add direct artifact download link to summary
            if [[ "${{ steps.upload-detailed-report.outputs.artifact-url }}" != "" ]]; then
              echo "üîó Adding direct artifact link to summary..."
              
              ARTIFACT_URL="${{ steps.upload-detailed-report.outputs.artifact-url }}"
              DETAILED_REPORT_NAME="${{ steps.find-report.outputs.report_filename }}"
              
              # Replace the detailed report line with a direct download link
              sed -i.bak "s|üìÑ \*\*Detailed Report\*\*:.*|üìÑ **Detailed Report**: [\`${DETAILED_REPORT_NAME}\`](${ARTIFACT_URL}) - Direct download|g" "./review-output/summary.md"
              
              # Add fallback if sed didn't match
              if ! grep -q "Direct download" "./review-output/summary.md"; then
                echo "" >> "./review-output/summary.md"
                echo "üìÑ **Detailed Report**: [\`${DETAILED_REPORT_NAME}\`](${ARTIFACT_URL}) - Direct download" >> "./review-output/summary.md"
              fi
            else
              echo "‚ö†Ô∏è No artifact URL available, keeping original summary"
            fi
            
            # Check file size (GitHub Actions limit)
            FILE_SIZE=$(stat -f%z "./review-output/summary.md" 2>/dev/null || stat -c%s "./review-output/summary.md" 2>/dev/null || echo "0")
            MAX_SIZE=1048576  # 1MB
            
            if [[ "$FILE_SIZE" -gt "$MAX_SIZE" ]]; then
              echo "‚ö†Ô∏è Summary too large, truncating..."
              head -c 900000 "./review-output/summary.md" > summary_truncated.md
              echo "" >> summary_truncated.md
              echo "---" >> summary_truncated.md
              echo "‚ö†Ô∏è **Summary Truncated**" >> summary_truncated.md
              echo "The summary was truncated due to size limits." >> summary_truncated.md
              mv summary_truncated.md "./review-output/summary.md"
            fi
            
            # Add workflow metadata
            echo "" >> "./review-output/summary.md"
            echo "---" >> "./review-output/summary.md"
            echo "**Workflow Information:**" >> "./review-output/summary.md"
            echo "- Validator: ${{ needs.validate-commonalities-version.outputs.validator_script }}" >> "./review-output/summary.md"
            echo "- Duration: ${{ steps.review.outputs.validation_duration }}s" >> "./review-output/summary.md"
            echo "- APIs Found: ${{ steps.review.outputs.apis_found_count }}" >> "./review-output/summary.md"
            echo "- Workflow Run: [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> "./review-output/summary.md"
            
            # Output as base64 to avoid shell interpretation issues
            {
              echo 'summary_content<<SUMMARY_EOF_MARKER'
              base64 -w 0 ./review-output/summary.md
              echo ''
              echo 'SUMMARY_EOF_MARKER'
            } >> $GITHUB_OUTPUT

          else
            echo "‚ùå No summary file found"
            
            ERROR_SUMMARY="‚ùå **API Review Failed**

          The automated review could not be completed.

          **Diagnostics:**
          - Exit Code: ${{ steps.review.outputs.validation_exit_code }}
          - Duration: ${{ steps.review.outputs.validation_duration }}s
          - APIs Found: ${{ steps.review.outputs.apis_found_count }}
          - Validator: ${{ needs.validate-commonalities-version.outputs.validator_script }}

          **Next Steps:**
          1. Check workflow logs for error details
          2. Verify API files exist in /code/API_definitions/
          3. Ensure validator script is properly deployed

          **Workflow Run:** [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            
          # Output as base64
            {
              echo 'summary_content<<SUMMARY_EOF_MARKER'
              echo "$ERROR_SUMMARY" | base64 -w 0
              echo ''
              echo 'SUMMARY_EOF_MARKER'
            } >> $GITHUB_OUTPUT
          fi

      - name: Upload Summary
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-review-summary-${{ inputs.repo_name }}-${{ inputs.issue_number != '0' && format('comment{0}', inputs.issue_number) || 'manual' }}-${{ inputs.commonalities_version }}
          path: ./review-output/summary.md
          retention-days: 7

  handle-unsupported-version:
    runs-on: ubuntu-latest
    needs: validate-commonalities-version
    if: needs.validate-commonalities-version.outputs.version_supported == 'false'
    outputs:
      summary_content: ${{ steps.create-error-summary.outputs.summary_content }}
      review_status: "error"
      critical_issues_count: "N/A"
    steps:
      - name: Create Version Error Summary
        id: create-error-summary
        run: |
          COMMONALITIES_VERSION="${{ inputs.commonalities_version }}"
          ERROR_MESSAGE="${{ needs.validate-commonalities-version.outputs.error_message }}"
          
          ERROR_SUMMARY="‚ùå **Unsupported Commonalities Version**

          **Error**: $ERROR_MESSAGE

          **Requested Version**: \`$COMMONALITIES_VERSION\`
          **Currently Supported**: \`0.6\`

          **Resolution Options:**
          1. **Use v0.6**: Change the version parameter to \`0.6\`
          2. **Future Versions**: Other versions are planned for future releases
          3. **Manual Review**: Use manual review process for unsupported versions

          **Version Roadmap:**
          - üìÖ Commonalities 0.7: Planned
          - üìÖ Commonalities 0.8: Planned  
          - üìÖ Commonalities 1.0: Planned

          **Workflow Run:** [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          
          # Output as base64
          {
            echo 'summary_content<<SUMMARY_EOF_MARKER'
            echo "$ERROR_SUMMARY" | base64 -w 0
            echo ''
            echo 'SUMMARY_EOF_MARKER'
          } >> $GITHUB_OUTPUT

  provide-outputs:
    runs-on: ubuntu-latest
    needs: [validate-commonalities-version, api-review, handle-unsupported-version]
    if: always()
    outputs:
      summary_content: ${{ steps.determine-outputs.outputs.summary_content }}
      review_status: ${{ steps.determine-outputs.outputs.review_status }}
      critical_issues_count: ${{ steps.determine-outputs.outputs.critical_issues_count }}
    steps:
      - name: Determine Final Outputs
        id: determine-outputs
        run: |
          echo "üîç Determining final outputs..."
          
          if [[ "${{ needs.validate-commonalities-version.outputs.version_supported }}" == "true" ]]; then
            echo "‚úÖ Using outputs from API review"
            
            {
              echo 'summary_content<<SUMMARY_EOF_MARKER'
              cat << 'SUMMARY_EOF'
          ${{ needs.api-review.outputs.summary_content }}
          SUMMARY_EOF
              echo 'SUMMARY_EOF_MARKER'
            } >> $GITHUB_OUTPUT
            
            echo "review_status=${{ needs.api-review.outputs.review_status }}" >> $GITHUB_OUTPUT
            echo "critical_issues_count=${{ needs.api-review.outputs.critical_issues_count }}" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Using outputs from version error handler"
            
            {
              echo 'summary_content<<SUMMARY_EOF_MARKER'
              cat << 'SUMMARY_EOF'
          ${{ needs.handle-unsupported-version.outputs.summary_content }}
          SUMMARY_EOF
              echo 'SUMMARY_EOF_MARKER'
            } >> $GITHUB_OUTPUT
            
            echo "review_status=error" >> $GITHUB_OUTPUT
            echo "critical_issues_count=N/A" >> $GITHUB_OUTPUT
          fi